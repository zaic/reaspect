grammar Reaspect

    rule statements
        sts:(stn:statement separator)* {
            def statements
                sts.elements.map { |st| st.stn.statement }
            end
        }
    end

    rule statement
        inp:input_variable {
            def statement
                { :statement => :input,
                  :variables => inp.variables }
            end
        }
        /
        out:output_variable {
            def statement
                { :statement => :output,
                  :variables => out.variables }
            end
        }
        /
        con:const_variable {
            def statement
                { :statement => :const,
                  :variables => con.variables }
            end
        }
        /
        var:variable {
            def statement
                res = var.variablesType
                res[:statement] = :variable
                res
            end
        }
        /
        fun:function {
            def statement
                res = fun.functionArgs
                res[:statement] = :function
                res
            end
        }
    end

    rule const_variable
        'const' spaces_opt st:assignment_statement other:(',' spaces_opt st:assignment_statement)* {
            def variables
                [st.variable] + other.elements.map { |i| i.st.variable }
            end
        }
    end

    rule input_variable
        '<<' spaces_opt st:assignment_statement other:(',' spaces_opt st:assignment_statement)* {
            def variables
                [st.variable] + other.elements.map { |i| i.st.variable }
            end
        }
    end

    rule assignment_statement
        var:name '=' spaces_opt value:token spaces_opt {
            def variable
                { :name  => var.name,
                  :value => value.text_value.to_s }
            end
        }
        /
        var:array spaces_opt {
            def variable
                { :name  => var.name,
                  :value => value.text_value.to_s }
            end
        }
    end

    rule output_variable
        '>>' spaces_opt vars:variable_list {
            def variables
                vars.variables
            end
        }
    end

    rule variable
        typename:name vars:variable_list {
            def variablesType
                { :typename => typename.name,
                  :variable => vars.variables }
            end
        }
    end

    rule function
        var_res:variable_list
        '=' spaces_opt
        fun_name:name
        
        '(' spaces_opt
        var_arg:(variable_list)?
        ')' spaces_opt

        mass_eval:(
            'for' spaces_req counter:name spaces_opt
            '=' spaces_opt bound_from:arithmetic spaces_opt
            '...' spaces_opt bound_to:arithmetic spaces_opt
            ';' spaces_opt
        )*
        
        {
            def functionArgs
                { :arguments => (var_arg.elements ? var_arg.variables: []),
                  :result    => var_res.variables,
                  :name      => fun_name.name,
                  :mass      => mass_eval.elements.map do |counter|
                    {
                        :counter    => counter.counter.name,
                        :bound_from => counter.bound_from.expression,
                        :bound_to   => counter.bound_to.expression
                    }
                  end
                }
            end
        }
    end

    rule variable_list
        var:variable_name var_token:(',' spaces_opt var_value:variable_name )* spaces_opt {
            def variables
                [var.variable] +
                var_token.elements.map { |cur| cur.var_value.variable }
            end
        }
    end



    rule variable_name
        var_name:name var_dim:('[' size:arithmetic ']')* spaces_opt {
            def variable
                short_name = var_name.name
                dims = var_dim.elements.map{ |dim| dim.size.expression }
                # long_name = dims.reduce(short_name) { |res, cur| res += '[' + cur.to_s + ']' }
                { :name => short_name,
                  :dims => dims }
            end
        }
    end

    rule name
        name_first:[a-zA-Z_] name_other:[a-zA-Z0-9_]* spaces_opt {
            def name
                name_first.text_value + name_other.text_value
            end
        }
    end



    rule arithmetic
        val:[a-zA-Z0-9_\+\-\*\/\s\%\(\)]+ {
            def expression
                val.text_value
            end
        }
    end

    rule token
        [^;,\s]+
    end

    rule separator
        [;\s]*
    end

    rule space
        [\s]
    end

    rule spaces_opt
        space*
    end

    rule spaces_req
        space+
    end

end
